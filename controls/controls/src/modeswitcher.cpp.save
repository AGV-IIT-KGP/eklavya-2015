
#include <iostream>
#include "modeswitcher.h"


using namespace ros;


ModeSwitcher::ModeSwitcher() :
	finaltwist(), Vx_Xbox_lock() , W_Xbox_lock() , Vx_planner_lock() , W_planner_lock() , xbox_flag_lock() 
{

	d=0.7;//distance between steering and the back tires in meters
	
	maxalpha=45 ; minalpha = -45;

	alpha=0;

	W_xbox=0;
	Vx_Xbox=0;

	W_Planner=0;
	Vx_Planner=0;
	
	xboxflag=0; //flag to tell whether xbox is currently sending data or not
	
	Max_Xbox_Vx=2.0;
}

void ModeSwitcher::joyCallback(const sensor_msgs::Joy::ConstPtr& joy) //main callback function for xbox data
{

	int manual_button=joy->buttons[4];
	int auto_button=joy->buttons[5];
	xbox_flag_lock.lock();
	if(manual_button==1 && xboxf)
	{
		xboxflag=1;
	}
	if(auto_button==1 && xboxflag==1)
	{
		xboxflag=0;
	}
	xbox_flag_lock.unlock();

	xbox_flag_lock.lock();

	if (xboxflag==0)
	{
		return ;
	}

	else if (xboxflag==1)
	{
 		float val = joy->axes[5];       //Reading from the right top trigger
		float rescaled_val = (val + 1.0 )/2;  //duty cycle to be sent to the BLDC control function
		Vx_Xbox_lock.lock();
		Vx_Xbox=( rescaled_val * Max_Xbox_Vx)/100;
		Vx_Xbox_lock.unlock();
	
 
		float alpha_axes=joy->axes[2];
		alpha=(alpha_axes)*(minalpha-maxalpha)/2; 
		Vx_Xbox_lock.lock();
		W_Xbox_lock.lock();
		W_xbox=(Vx_Xbox*tan(alpha))/d;
		W_Xbox_lock.unlock();
		Vx_Xbox_lock.unlock();
	}
	xbox_flag_lock.unlock();
}




void ModeSwitcher::planCallback(const geometry_msgs::Twist::ConstPtr& pose)
{		
		xbox_flag_lock.lock();
		
		if(xboxflag==1)
		{
			return ;
		}
		else if(xboxflag==0)
		{
			Vx_planner_lock.lock();
			Vx_Planner=pose->linear.x;
			Vx_planner_lock.unlock();
			
			W_planner_lock.lock();
			W_Planner = pose->angular.z;
			W_planner_lock.unlock();
		 //calculate angle required to be sent
		 //add data in transfer variable
			return ;
		}
		
		xbox_flag_lock.unlock();
}

 void ModeSwitcher::publish(int argc, char** argv){

	ros::init(argc, argv, "modeswitcher");
	ros::NodeHandle nh_;
	ros::Rate loop_rate(20);
	
	ros::Subscriber joy_sub;
	ros::Subscriber plan_sub;  

  	joy_sub = nh_.subscribe <sensor_msgs::Joy> ("joy", 1000 , &ModeSwitcher::joyCallback , this); 
  	plan_sub = nh_.subscribe <geometry_msgs::Twist> ("cmd_vel", 1000 , &ModeSwitcher::planCallback, this); 
  	
	nh_.getParam("/modeswitcher/maxvelocity", Max_Xbox_Vx);
	nh_.getParam("d",d);
	nh_.getParam("Alpha_Max",maxalpha);
	nh_.getParam("Alpha_Min",minalpha);

	ros::Publisher send_twist = nh_.advertise<geometry_msgs::Twist>("target_pose", 5);

	while(ros::ok)
	{
		xbox_flag_lock.lock();
		
		if(xboxflag==1)
		{
			cout<<"Sending Xbox Data Right Now";
			cout<<endl;
				Vx_Xbox_lock.lock();
				finaltwist.linear.x=Vx_Xbox;
				cout<<"Vx from xbox: "<<Vx_Xbox;
				cout<<endl;
				Vx_Xbox_lock.unlock();
				
				W_Xbox_lock.lock();
				finaltwist.angular.z= W_xbox;
				cout<<"Wx from xbox: "<<W_xbox;
				cout<<endl;
				W_Xbox_lock.unlock();
				
				send_twist.publish(finaltwist);
		}
		
		else if(xboxflag==0)
		{
			cout<<"Sending Planner Data Right Now";
			cout<<endl;
				Vx_planner_lock.lock();
					finaltwist.linear.x=Vx_Planner;
				Vx_planner_lock.unlock();
				
				W_planner_lock.lock();
					finaltwist.linear.x=W_Planner;
				W_planner_lock.unlock();

		}
		
		xbox_flag_lock.unlock();
		ros::spinOnce();
		loop_rate.sleep();
	}
 }
 
 
 
int main(int argc, char** argv)
{	

	ModeSwitcher * layer = new ModeSwitcher();
	
	layer->publish(argc, argv);
	
	delete layer;
}
